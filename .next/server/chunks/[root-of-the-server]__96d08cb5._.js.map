{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///Users/markus/Developer/Altenheim/Quiz/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/markus/Developer/Altenheim/Quiz/app/api/quiz/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport { QuizDifficulty } from '@prisma/client';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const limit = parseInt(searchParams.get('limit') || '10', 10);\n    const tags = searchParams.get('tags')?.split(',') || [];\n    const difficulty = searchParams.get('difficulty') as QuizDifficulty | null;\n\n    // Build where clause\n    const where: any = {};\n    \n    if (tags.length > 0) {\n      // Filter by tags - check if any of the requested tags are in the question's tags\n      where.OR = tags.map(tag => ({\n        tags: {\n          contains: tag.trim()\n        }\n      }));\n    }\n    \n    if (difficulty) {\n      where.difficulty = difficulty;\n    }\n\n    const questions = await prisma.quizQuestion.findMany({\n      where,\n      take: limit,\n      orderBy: {\n        createdAt: 'asc'\n      }\n    });\n\n    // Parse JSON strings back to arrays\n    const parsedQuestions = questions.map(q => ({\n      ...q,\n      choices: JSON.parse(q.choices),\n      tags: JSON.parse(q.tags),\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: parsedQuestions,\n      count: parsedQuestions.length,\n    });\n  } catch (error) {\n    console.error('Error fetching quiz questions:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to fetch questions' },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,eAAe,QAAQ,OAAO,CAAC,YAAY;QACjD,MAAM,QAAQ,SAAS,aAAa,GAAG,CAAC,YAAY,MAAM;QAC1D,MAAM,OAAO,aAAa,GAAG,CAAC,SAAS,MAAM,QAAQ,EAAE;QACvD,MAAM,aAAa,aAAa,GAAG,CAAC;QAEpC,qBAAqB;QACrB,MAAM,QAAa,CAAC;QAEpB,IAAI,KAAK,MAAM,GAAG,GAAG;YACnB,iFAAiF;YACjF,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAA,MAAO,CAAC;oBAC1B,MAAM;wBACJ,UAAU,IAAI,IAAI;oBACpB;gBACF,CAAC;QACH;QAEA,IAAI,YAAY;YACd,MAAM,UAAU,GAAG;QACrB;QAEA,MAAM,YAAY,MAAM,yHAAM,CAAC,YAAY,CAAC,QAAQ,CAAC;YACnD;YACA,MAAM;YACN,SAAS;gBACP,WAAW;YACb;QACF;QAEA,oCAAoC;QACpC,MAAM,kBAAkB,UAAU,GAAG,CAAC,CAAA,IAAK,CAAC;gBAC1C,GAAG,CAAC;gBACJ,SAAS,KAAK,KAAK,CAAC,EAAE,OAAO;gBAC7B,MAAM,KAAK,KAAK,CAAC,EAAE,IAAI;YACzB,CAAC;QAED,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,gBAAgB,MAAM;QAC/B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA4B,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}